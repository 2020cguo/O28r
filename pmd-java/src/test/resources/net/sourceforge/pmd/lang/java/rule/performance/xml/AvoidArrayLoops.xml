<?xml version="1.0" encoding="UTF-8"?>
<test-data
    xmlns="http://pmd.sourceforge.net/rule-tests"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">

    <test-code>
        <description>copy index into array</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar() {
        for (int i=0;i<10;i++) {
            a[i] = i;
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>copy one array to another</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar() {
        for (int i=0;i<10;i++) {
            a[i] = b[i];
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>copy via while loop</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar() {
        int i = 0;
        while (i < 10) {
            a[i] = b[i];
            i++;
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>copy involving multiple arrays is ok</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar() {
        for (int i = 0; i < 10; i++) {
            x[i] = b[i] + 1;
            y[i] = a[i] + 2;
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>copy involving method invocation on array element is ok</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar() {
        for (int i=0;i<10;i++) {
            a[i] = b[i].size();
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>using an offset, still bad</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar() {
        for (int i=0;i<10;i++) {
            b[i]=a[i+6];
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>nested arrays on LHS, ok</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar() {
        for (int i=0;i<10;i++) {
            b[c[i]] = a[i];
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>adding to array is ok</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar1() {
        for (int i = 0; i < 10; i++) {
            a[i] += b[i];
        }
    }
    public void bar2() {
        int i = 0;
        for (i = 0; i < 10; i++) {
            a[i] += b[i];
        }
    }
}
        ]]></code>
    </test-code>
    
    <test-code>
        <description>[java] AvoidArrayLoops false positive on double assignment #1167</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Test {
  public static void main( String[] args ) {
    double[] foo = new double[100];
    double bar = 0.0;
    int[] exps = new int[10];

    for (int i = 0; i < exps.length; i++) {
      double value = Math.random();
      foo[i] = Math.exp(value);
      bar += foo[i];
    }
  }
}
]]></code>
    </test-code>

    <test-code>
        <description>Nested array on RHS</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class AvoidArrayLoops {
  void copy_a_to_b(int[] a, int[] b) {
        int[] c = new int[10];
        // this will not trigger the rule
        for (int i = 0; i < 10; i++) {
            b[i] = a[c[i]];
        }
  }
}
]]></code>
    </test-code>
</test-data>

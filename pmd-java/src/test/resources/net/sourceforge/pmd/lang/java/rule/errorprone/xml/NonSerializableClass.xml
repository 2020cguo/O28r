<?xml version="1.0" encoding="UTF-8"?>
<test-data
    xmlns="http://pmd.sourceforge.net/rule-tests"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">

    <test-code>
        <description>Example code</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <expected-messages>
            <message>The field 'stream' of serializable class 'Buzz' is of non-serializable type 'java.io.InputStream'.</message>
        </expected-messages>
        <code><![CDATA[
class Buzz implements java.io.Serializable {
    private static final long serialVersionUID = 1L;

    private transient int someFoo;      // good, it's transient
    private static int otherFoo;        // also OK, it's static
    private java.io.InputStream stream; // bad - InputStream is not serializable

    public void setStream(InputStream stream) {
        this.stream = stream;
    }

    public int getSomeFoo() {
          return this.someFoo;
    }
}
]]></code>
    </test-code>

    <test-code>
        <description>String, no accessor, ok</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.io.Serializable;
public class Foo implements Serializable {
    private String foo;
    private String bar = foo;
}
        ]]></code>
    </test-code>

    <test-code>
        <description>private static InputStream</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.io.InputStream;
import java.io.Serializable;
public class Foo implements Serializable {
    private static InputStream foo;
}
        ]]></code>
    </test-code>

    <test-code>
        <description>private transient InputStream</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.io.InputStream;
import java.io.Serializable;
public class Foo implements Serializable {
    private transient InputStream foo;
}
        ]]></code>
    </test-code>

    <test-code>
        <description>InputStream in a non-serializable class is OK</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.io.InputStream;
public class Foo {
    private InputStream foo;
}
]]></code>
    </test-code>

    <test-code>
        <description>interface</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.io.InputStream;
import java.io.Serializable;
public interface Foo extends Serializable {
    public InputStream getFoo();
}
        ]]></code>
    </test-code>

    <test-code>
        <description>@SuppressWarnings("serial")</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.io.InputStream;
import java.io.Serializable;
@SuppressWarnings("serial")
public class Foo implements Serializable {
    private InputStream foo;
}
        ]]></code>
    </test-code>

    <test-code>
        <description>ClassCastException on generic method</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.util.List;
public abstract class List<A> implements Iterable<A> {
    public static <A> F<List<A>, Boolean> isEmpty() {
        return null;
    }
}
class F<X, Y> {}
        ]]></code>
    </test-code>

    <test-code>
        <description>Ignore Externalizable</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.io.Externalizable;
import java.io.InputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectInput;
class Foo implements Externalizable {
    private InputStream foo;
    void writeExternal(ObjectOutput out) throws IOException {}
    void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {}
}
]]></code>
    </test-code>

    <test-code>
        <description>Ignore manual serialization</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.io.InputStream;
import java.io.Serializable;
import java.io.IOException;
import java.io.ObjectStreamException;
class Foo implements Serializable {
    private InputStream foo; // no violation, because writeObject/readObject is present
    private void writeObject(java.io.ObjectOutputStream out) throws IOException {}
    private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {}
    private void readObjectNoData() throws ObjectStreamException {}
}
]]></code>
    </test-code>

    <test-code>
        <description>Ignore manual serialization with replacement object</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.io.InputStream;
import java.io.Serializable;
import java.io.ObjectStreamException;
class Foo implements Serializable {
    private InputStream foo; // no violation, because writeReplace/readResolve is present
    private Object writeReplace() throws ObjectStreamException {}
    private Object readResolve() throws ObjectStreamException {}
}
]]></code>
    </test-code>
</test-data>
